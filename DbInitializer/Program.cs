using Npgsql;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace DbInitializer
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Password: ");
            var pswd = GetPassword();
            var dbName = "simplesearchengine";
            CreateDb(pswd, dbName);
            var m_conn = CreateConnection(pswd, dbName);
            m_conn.Open();
            CreateTable(m_conn);
            PopulateTable(m_conn);
            m_conn.Close();
            Console.WriteLine("\r\nСоздана база simplesearchengine");
            Thread.Sleep(3000);
        }

        private static NpgsqlConnection CreateConnection(string pswd, string dbName)
        {
            var connStr = $"Server=localhost;Port=5432;Database={dbName};User Id=postgres;Password={pswd};";
            var m_conn = new NpgsqlConnection(connStr);
            return m_conn;
        }

        private static void PopulateTable(NpgsqlConnection m_conn)
        {
            var values = Properties.Resources.IMDB_Movie_Titles_parsed;
            values = AddApostrophe(values);

            values
                = "("
                + values.Replace("\r\n", "),\r\n(")
                + ")";

            string populateTableText = @"INSERT INTO movies(id, name, year) " +
                $"VALUES {values}";
            var m_populatetbl_cmd = new NpgsqlCommand(populateTableText, m_conn);
            m_populatetbl_cmd.ExecuteNonQuery();
        }

        private static string AddApostrophe(string raw)
        {
            return Regex.Replace(raw, ",.*?,", (Match x) =>
            {
                var y = x.Value.Trim(',');
                return $",'{y}',";
            });
        }

        private static void CreateTable(NpgsqlConnection m_conn)
        {
            string createTableText = @"
CREATE TABLE movies
(
  id integer generated by default as identity primary key,
  year integer,
  name text
)";
            var m_createtbl_cmd = new NpgsqlCommand(createTableText, m_conn);
            m_createtbl_cmd.ExecuteNonQuery();
        }

        private static void CreateDb(string pswd, string dbName)
        {
            var connStr = $"Server=localhost;Port=5432;User Id=postgres;Password={pswd};";
            var m_conn = new NpgsqlConnection(connStr);
            string createDbText = $@"
CREATE DATABASE {dbName}
ENCODING = 'UTF8'";
            var m_createdb_cmd = new NpgsqlCommand(createDbText, m_conn);
            m_conn.Open();
            m_createdb_cmd.ExecuteNonQuery();
            m_conn.Close();
        }

        private static string GetPassword()
        {
            string pass = "";
            do
            {
                ConsoleKeyInfo key = Console.ReadKey(true);
                // Backspace Should Not Work
                if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                {
                    pass += key.KeyChar;
                    Console.Write("*");
                }
                else
                {
                    if (key.Key == ConsoleKey.Backspace && pass.Length > 0)
                    {
                        pass = pass.Substring(0, (pass.Length - 1));
                        Console.Write("\b \b");
                    }
                    else if (key.Key == ConsoleKey.Enter)
                    {
                        return pass;
                    }
                }
            } while (true);
        }
    }
}
